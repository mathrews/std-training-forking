use anyhow::{bail, Result};
use core::str;
use embedded_svc::{
    http::{client::Client, Method},
    io::Read,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::prelude::Peripherals,
    http::client::{Configuration, EspHttpConnection},
};
use wifi::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("Wokwi-GUEST")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}
fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    get("http://neverssl.com/")?;

    Ok(())
}

fn get(url: impl AsRef<str>) -> Result<()> {
    // 1. Create a new EspHttpConnection with default Configuration. (Check documentation)
    let httpconnection = EspHttpConnection::new(&Configuration {
        ..Default::default()
    })?;
    // 2. Get a client using the embedded_svc Client::wrap method. (Check documentation)
    let mut httpclient = Client::wrap(httpconnection);
    // 3. Open a GET request to `url`
    let headers = [("accept", "text/plain")];

    let request = httpclient.request(Method::Get, url.as_ref(), &headers)?;

    // 4. Submit the request and check the status code of the response.
    let response = request.submit().unwrap();
    let status = response.status();

    println!("Response code: {}", status);

    // 5. If the status is OK, read response data chunk by chunk into a buffer and print it until done.
    match status {
        200..=299 => {
            let mut buf = [0_u8; 256];
            let mut offset = 0;
            let mut total = 0;
            let mut reader = response;

            loop {
                // 6. Try converting the bytes into a Rust (UTF-8) string and print it.
                // }
                if let Ok(size) = Read::read(&mut reader, &mut buf[offset..]) {
                    if size == 0 {
                        break;
                    }

                    total += size;

                    let size_plus_offset = size + offset;
                    match str::from_utf8(&buf[..size_plus_offset]) {
                        Ok(text) => {
                            println!("{}.", text);
                            offset = 0;
                        }
                        Err(error) => {
                            let valid_up_to = error.valid_up_to();
                            unsafe {
                                println!("{}", str::from_utf8_unchecked(&buf[..valid_up_to]));
                            }
                            buf.copy_within(valid_up_to.., 0);
                            offset = size_plus_offset - valid_up_to;
                        }
                    }
                }
            }
            println!("Total: {} bytes", total);
        }
        300..=399 => {
            println!("Redirection Status Request.");
        }
        400..=499 => {
            println!("Bad Requests Status.");
        }
        500..=599 => {
            println!("Server Trouble Status");
        }
        _ => bail!("Unexpected response code: {}", status),
    }

    Ok(())
}
